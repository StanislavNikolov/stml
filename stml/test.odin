package stml

import "core:testing"

@(test)
test_mul :: proc (t: ^testing.T) {
	a := new(M(3,5)); defer free(a)
	b := new(M(5,4)); defer free(b)
	r := new(M(3,4)); defer free(r)
	o := new(M(3,4)); defer free(o)

	a.data = [3*5]f32{
	   1.5410, -0.2934, -2.1788,  0.5684, -1.0845,
	  -1.3986,  0.4033,  0.8380, -0.7193, -0.4033,
	  -0.5966,  0.1820, -0.8567,  1.1006, -1.0712
	}
	b.data = [5*4]f32{
	  -0.6136,  0.0316, -0.4927,  0.2484,
	  -0.2303, -0.3918,  0.5433, -0.3952,
	   0.2055, -0.4503, -0.5731, -0.5554,
	  -1.5312, -1.2341,  1.8197, -0.5515,
	  -1.3253,  0.1886, -0.0691, -0.4949
	}
	r.data = [3*4]f32{
	  -0.7588,  0.2388,  1.4393,  1.9320,
	   2.5734,  0.2320, -0.8531, -0.3759,
	  -0.1175, -1.2646,  2.9606,  0.1788
	}
	mul(a,b,o)
	testing.expect(t, equal(o, r, 0.001))
}

@(test)
test_mulT :: proc (t: ^testing.T) {
	a := new(M(3,5)); defer free(a)
	b := new(M(4,5)); defer free(b)
	r := new(M(3,4)); defer free(r)
	o := new(M(3,4)); defer free(o)

	a.data = [3*5]f32{
	   0.1227, -2.2188,  0.2590, -1.0297, -0.5008,
	   0.2734, -0.9181, -0.0404,  0.2881, -0.0075,
	  -0.9145, -1.0886, -0.2666,  0.1894, -0.2190
	}
	b.data = [4*5]f32{
	   1.6459, -1.3602,  0.3446,  0.5199,  0.9625,
	   0.3492, -0.9215, -0.0562, -0.7015,  1.0367,
	  -0.6037, -1.2788,  0.1239,  1.1648,  0.9234,
	   1.3873,  1.3750,  0.6596,  0.4766, -1.0163
	}
	r.data = [3*4]f32{
	   2.2918,  2.2760,  1.1335, -2.6916,
	   1.8273,  0.7338,  1.3326, -0.7649,
	  -0.2287,  0.3388,  1.9295, -2.6285
	}

	mulT(a,b,o)
	testing.expect(t, equal(o, r, 0.001))
}

@(test)
test_conv2d_simple :: proc(t: ^testing.T) {
	i := new(T(1, 5, 5))    ; defer free(i)
	w := new(Q(2, 1, 3, 3)) ; defer free(w)
	b := new(V(2))          ; defer free(b)
	o := new(T(2, 3, 3))    ; defer free(o)
	r := new(T(2, 3, 3))    ; defer free(r)

	i.data = [1*5*5]f32{
	    0.6104,  0.4669,  1.9507, -1.0631,  1.1404,
	   -0.0899,  0.7298, -1.8453, -0.1021, -0.4794,
	   -0.1434, -0.3173,  0.9671, -0.9911,  0.3016,
	   -0.1073,  0.9985, -0.0195,  0.9910, -0.7777,
	    0.3140,  0.2133, -0.1201,  0.3605, -0.3140
	}
	w.data = [2*1*3*3]f32{
	     0.1207, -0.3008,  0.2109,
	    -0.0385, -0.1488,  0.2666,
	    -0.2694,  0.0358, -0.0698,


	     0.2380,  0.0930,  0.1602,
	     0.1177, -0.0802, -0.0701,
	    -0.2747,  0.1806,  0.2647
	}
	b.data = [2]f32{
	  0.2281, -0.2351
	}
	r.data = [2*3*3]f32{
	   -0.0645, -0.1180,  0.6652,
	   -0.0150,  0.1151,  0.2206,
	    0.2920, -0.1684,  0.4197,

	    0.5644,  0.1278, -0.2274,
	   -0.3388, -0.3104, -0.6100,
	   -0.3147, -0.3147, -0.0611
	}

	conv2d(i, w, b, o, stride=1)
	testing.expect(t, equal(o, r, 0.001))
}

@(test)
test_conv2d_big :: proc(t: ^testing.T) {
	i := new(T(2, 5, 5))    ; defer free(i)
	w := new(Q(3, 2, 3, 3)) ; defer free(w)
	b := new(V(3))          ; defer free(b)
	o := new(T(3, 3, 3))    ; defer free(o)
	r := new(T(3, 3, 3))    ; defer free(r)

	i.data = [2*5*5]f32{
	    0.5335,  0.4069,  0.3946,  0.1715,  0.8760,
	   -0.2871,  1.0216, -0.5111, -1.0922,  0.3920,
	    0.5945,  0.6623, -1.2063,  0.6074, -0.5472,
	   -1.1005,  0.0975,  0.9634,  0.8403, -1.2537,
	    0.9868, -0.4947, -1.2830,  0.4386,  1.2836,

	   -0.6659,  0.5651,  0.2877, -0.0334, -1.0619,
	   -0.1144,  0.1954,  1.5713,  0.1916, -1.0786,
	    1.4403, -0.1106,  0.5769, -0.1692,  1.1887,
	   -0.1575, -0.0455, -0.4755, -0.8707,  0.1447,
	    1.9029,  0.3904,  0.0331, -1.0234,  0.7335
	}
	w.data = [3*2*3*3]f32{
	    -0.1573, -0.1358,  0.1355,
	     0.1248,  0.1809,  0.0855,
	    -0.0787, -0.0659,  0.0696,

	     0.1938,  0.0641, -0.1115,
	    -0.1108, -0.2228,  0.0509,
	    -0.1323, -0.2101,  0.2067,


	    -0.1531, -0.0268,  0.0675,
	     0.0075, -0.1586, -0.1905,
	     0.1879,  0.0384,  0.1955,

	    -0.0790,  0.0694, -0.0539,
	    -0.0105, -0.1436,  0.0797,
	     0.0745, -0.0049, -0.0530,


	    -0.1453,  0.1630, -0.1755,
	     0.0966, -0.0793, -0.1137,
	     0.0423, -0.1224,  0.0543,

	     0.0463, -0.1750,  0.0392,
	     0.1004,  0.0933, -0.0297,
	    -0.1932, -0.0363,  0.0819
	}
	b.data = [3]f32{
	 -0.0860,  0.0895,  0.1570
	}
	r.data = [3*3*3]f32{
	   -0.3646, -0.5410, -0.1584,
	   -0.3690, -0.5033,  0.6370,
	   -0.7206,  0.2992,  0.8585,

	    0.1100,  0.2846, -0.2490,
	    0.1845,  0.2065,  0.2118,
	   -0.4366, -0.1667,  0.3492,

	   -0.4808,  0.7257, -0.0116,
	    0.7233, -0.1167, -0.1091,
	   -0.0771, -0.5412,  0.7184
	}
	conv2d(i, w, b, o, stride=1)
	testing.expect(t, equal(o, r, 0.001))
}

@(test)
test_conv2d_stride_simple :: proc(t: ^testing.T) {
	i := new(T(2, 6, 6))    ; defer free(i)
	w := new(Q(3, 2, 3, 3)) ; defer free(w)
	b := new(V(3))          ; defer free(b)
	o := new(T(3, 2, 2))    ; defer free(o)
	r := new(T(3, 2, 2))    ; defer free(r)
	i.data = [2*6*6]f32{
	    0.4201,  1.1290,  0.4264, -1.1361, -0.1292, -0.0546,
	    0.4083,  1.1264, -0.6079, -0.3625, -1.5072, -0.5087,
	   -1.2426,  1.2846,  0.2438,  0.5304, -2.7575, -0.8324,
	    0.4900,  0.2908,  0.6442,  3.9300, -0.1244,  0.2953,
	    2.4197,  1.6456, -0.3087, -1.5147,  1.9457, -1.2904,
	   -2.3495, -2.0689, -0.3099, -0.0561,  0.5174, -1.5962,

	    0.5411,  1.5390,  1.0860,  1.2464,  0.5631, -1.4351,
	    0.7194, -1.3707,  0.8732,  0.0651,  0.7732, -0.9701,
	    1.2359, -0.1002,  2.1364,  0.0700,  0.4990,  0.8780,
	    0.3894,  1.4625,  0.5455, -1.5374,  0.3124,  0.7401,
	    0.2977, -0.6848, -0.0433,  1.8393, -0.6990,  0.5744,
	    1.2381, -0.6405, -0.6353, -0.1629,  0.4930, -0.4781
	}
	w.data = [3*2*3*3]f32{
	     0.0964, -0.1789,  0.2256,
	     0.1790, -0.0859,  0.1325,
	    -0.1339, -0.0369,  0.2001,

	     0.0097, -0.1667, -0.0788,
	    -0.0640, -0.0455,  0.0226,
	     0.2180,  0.0126, -0.1455,


	     0.0121,  0.1130,  0.1169,
	    -0.2154, -0.0422, -0.1752,
	    -0.1006,  0.0849, -0.1674,

	     0.0876,  0.2001,  0.0155,
	    -0.1571, -0.0844,  0.0515,
	    -0.1797,  0.1171, -0.2140,


	    -0.2266, -0.2290, -0.0478,
	     0.1585, -0.2231,  0.1959,
	    -0.0943,  0.0690,  0.0107,

	    -0.2125,  0.1955,  0.1269,
	     0.2343,  0.1191, -0.1556,
	     0.1967,  0.0127,  0.1118
	}
	b.data = [3]f32{
	 -0.1890, -0.0678, -0.2314
	}
	r.data = [3*2*2]f32{
	   -0.5344, -0.7442,
	   -0.9383, -0.5072,

	    0.0078,  0.4541,
	   -0.3515, -0.3914,

	   -0.0290,  0.2648,
	   -0.0201, -1.6741
	}
	conv2d(i, w, b, o, stride=2)
	testing.expect(t, equal(o, r, 0.001))
}

@(test)
test_conv2d_stride_big :: proc(t: ^testing.T) {
	i := new(T(2, 7, 7))    ; defer free(i)
	w := new(Q(3, 2, 4, 4)) ; defer free(w)
	b := new(V(3))          ; defer free(b)
	o := new(T(3, 2, 2))    ; defer free(o)
	r := new(T(3, 2, 2))    ; defer free(r)

	i.data = [2*7*7]f32{
	   -0.4830, -0.2608,  0.4763,  0.3427, -1.6045, -0.5873,  0.6004,
	    0.4378,  0.7036, -1.3432, -0.0204, -1.4271,  0.5926, -1.1582,
	    0.0358,  0.2160,  1.2182,  0.2550,  0.2740, -0.5611, -0.4303,
	   -0.3332, -1.5464, -0.0147, -1.0767, -0.6509, -1.6197, -0.0569,
	    0.6297,  0.2712, -0.6860, -1.0918,  0.3424,  0.0082,  0.3093,
	    0.3642,  0.0881, -1.3069, -0.7064, -0.1642, -0.4551, -2.2455,
	   -1.0412, -0.1906,  0.7167, -2.0002, -2.4097,  0.2194, -1.4268,

	    0.2320, -1.7318, -0.5461, -0.6302, -0.6347,  0.9747,  0.2098,
	   -0.4067, -0.9092,  0.5597, -0.7735,  0.5962, -1.2504,  1.1456,
	    0.7393,  0.6227,  1.8351, -0.9537, -0.8180,  0.3603, -1.6146,
	   -2.4734,  0.0362,  0.4213,  1.7452,  0.0145,  0.8436,  0.6829,
	    3.3944, -1.6688,  0.5109,  1.3714,  0.9738, -1.0295,  0.1267,
	    0.0055,  0.7943,  0.4072, -0.3609,  1.3103, -0.9651,  0.6514,
	   -0.1025, -0.6770, -0.4107, -1.6186,  0.5079,  2.3230,  0.2298
	}
	w.data = [3*2*4*4]f32{
	     0.1463, -0.0593, -0.1639,  0.0725,
	     0.1721, -0.0503, -0.1464, -0.1603,
	     0.0443, -0.0134, -0.0893,  0.0357,
	     0.0671,  0.1406,  0.1372, -0.0265,

	    -0.1559, -0.1597,  0.1651,  0.0781,
	     0.0771, -0.1530,  0.1637,  0.1675,
	     0.1596, -0.1491, -0.0667, -0.1216,
	     0.1674, -0.0760, -0.0807,  0.0926,


	    -0.0818, -0.0871, -0.0155, -0.0170,
	    -0.1377,  0.1474, -0.0780,  0.0627,
	     0.1538,  0.0892,  0.0250,  0.1504,
	     0.0238, -0.0818,  0.1672,  0.0418,

	    -0.1725, -0.0503, -0.1204,  0.1550,
	    -0.0292, -0.1611, -0.0111,  0.1110,
	     0.0459,  0.0559,  0.0164,  0.0659,
	    -0.0431, -0.0703, -0.1652, -0.1332,


	     0.0766, -0.1047,  0.0254,  0.0564,
	     0.0125, -0.1146,  0.1691, -0.1028,
	     0.1454, -0.1406, -0.0425,  0.0962,
	    -0.0722,  0.1485, -0.1217, -0.1485,

	    -0.0797,  0.0286,  0.1628, -0.0844,
	     0.0632, -0.0443, -0.0383,  0.1300,
	    -0.1370,  0.0188,  0.1662, -0.0243,
	     0.1373, -0.0544,  0.1423, -0.1710
	}
	b.data = [3]f32{
	 -0.0255, -0.0311,  0.0573
	}
	r.data = [3*2*2]f32{
	   -0.3080,  0.7262,
	    1.7055, -1.6287,

	    0.2490, -0.8807,
	    1.3635, -0.7522,

	   -0.8699,  1.5716,
	    1.2889, -0.4094
	}
	conv2d(i, w, b, o, stride=3)
	testing.expect(t, equal(o, r, 0.001))
}
